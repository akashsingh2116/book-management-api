📚 BOOK MANAGEMENT API & MERN AUTHENTICATION

This project is a backend application built with the MERN stack (MongoDB, Express.js, React, Node.js).
It focuses on user authentication and book management with strong security practices and a clean, modular structure.

🔗 Live API: https://book-management-api-tlq3.onrender.com

---------------------------------------------------------------------------------------------------------------------------------------------

🔑 Project Overview

The application allows users to:

📝 Register with name, email, and password

🔐 Login securely using their credentials

✅ Access books only after authentication

📖 Perform CRUD operations on books

Authentication is implemented using JSON Web Tokens (JWT) and bcryptjs for password hashing, ensuring that sensitive data like passwords is never stored in plain text.

---------------------------------------------------------------------------------------------------------------------------------------------

🧩 Core Functionalities
👤 User Module

Register → Create an account (passwords are hashed before saving).

Login → Authenticate with email & password, returns a JWT token.

Authentication → Only authenticated users with a valid token can access protected routes.

📖 Book Module (Protected)

➕ Add Book → Create new book entries.

📑 View Books → Fetch all available books.

✏️ Update Book → Modify details of an existing book.

❌ Delete Book → Remove books from the system.

---------------------------------------------------------------------------------------------------------------------------------------------

⚙️ Tech Stack
Technology	Purpose
Node.js	- Backend runtime environment
Express.js - Framework for building APIs and handling routes
MongoDB	NoSQL - database for storing users & books
Mongoose -	ODM for MongoDB (schemas & models)
bcryptjs -	Secure password hashing & comparison
jsonwebtoken -	Authentication & authorization with JWT
dotenv - Manage environment variables (DB URI, JWT secret)

---------------------------------------------------------------------------------------------------------------------------------------------

📂 Project Architecture
/models       → Database schemas (User, Book)
/controllers  → Core logic for handling requests
/routes       → API endpoints linked to controllers
/middleware   → JWT authentication middleware
/config       → Database connection setup
server.js     → Entry point of the application

---------------------------------------------------------------------------------------------------------------------------------------------

🔐 Security Highlights

🔒 Password Hashing → Plain passwords never stored, bcryptjs used for hashing.

🔑 JWT Tokens → Secure login sessions, only valid tokens can access books.

🛡 Middleware Protection → All book routes are protected.

⚠️ Error Handling → Meaningful messages for unauthorized users, invalid tokens, or wrong credentials.

---------------------------------------------------------------------------------------------------------------------------------------------

🧾 Learning Outcomes 

Authentication Flow → Register → Login → Token → Access Protected APIs

Mongoose Middleware → Hashing password before saving a user

comparePassword Method → User model helper for verifying credentials

Separation of Concerns → Routes, Controllers, Models, Middleware are modular

Error Handling → Clear responses for failed auth or server issues

Scalability → Structure makes it easy to add new features later

---------------------------------------------------------------------------------------------------------------------------------------------

📜 Summary

This project demonstrates how to build a secure authentication system with protected routes and CRUD functionality for books.
It combines Node.js, Express, MongoDB, and JWT into a real-world backend project that’s ideal for learning, interviews, and viva preparation.

✨ Clean, secure, and production-ready backend project. ✨
_____________________________________________________________________________________________________________________________________________
